import {ConnectButton} from "@rainbow-me/rainbowkit";
import type {NextPage} from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import {Button, Image, Progress, Input} from "@chakra-ui/react";
import contractAbi from "../public/AICreations.json"
import React, {useState} from "react";
import {Contract} from "ethers";
import {useAccount, useSigner} from "wagmi";

const Home: NextPage = () => {

        const {address} = useAccount();
        const {data: signer} = useSigner();

        // function generateCreature() {
        //     setIsLoading(true);
        //
        //     fetch("https://api.replicate.com/v1/predictions", {
        //         method: 'POST',
        //         mode: 'cors', // no-cors, *cors, same-origin
        //         // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        //         // credentials: 'same-origin', // include, *same-origin, omit
        //         headers: {
        //             'Authorization': 'Token ' + process.env.NEXT_PUBLIC_REPLICATE_API_TOKEN,
        //             'Content-Type': 'application/json',
        //             'Accept': 'application/json'
        //         },
        //         // redirect: 'follow',
        //         // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        //         body: JSON.stringify({
        //             data: {
        //                 version: "3554d9e699e09693d3fa334a79c58be9a405dd021d3e11281256d53185868912",
        //                 input: {prompt: promptInput}
        //             }
        //         })
        //     })
        //         .then((response) => response.json())
        //         .then((data) => {
        //             setIsLoading(false);
        //             setCreatureImg(data.output[0]);
        //             console.log(data); // JSON data parsed by `data.json()` call
        //         }).catch((error) => {
        //         setIsLoading(false);
        //         console.error('Error:', error);
        //     });
        // }

        async function generateCreature(e: React.MouseEvent<HTMLButtonElement>) {
            e.preventDefault();
            setIsLoading(true);
            const response = await fetch("/api/generate", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({prompt: promptInput}),
            });

            if (!response.ok) {
                throw new Error(`Error: ${response.status}`);
            }

            const data = await response.json();
            console.log('POST: ', data);
            setCreatureImg(data.image_url);
            setIsLoading(false);
        }

        const [promptInput, setPromptInput] = useState<string>("");
        const [creatureImg, setCreatureImg] = useState<string>("https://replicate.com/api/models/lambdal/text-to-pokemon/files/4d12a241-fd84-4b0a-8321-80dd8c6ae784/out-0.png");
        const [isLoading, setIsLoading] = useState<boolean>(false);

        function handlePromptInput(e: React.ChangeEvent<HTMLInputElement>) {
            setPromptInput(e.target.value)
        }

        async function mintNft() {
            setIsLoading(true);
            const response = await fetch("/api/ipfs", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({prompt: promptInput, image_url: creatureImg}),
            });

            if (!response.ok) {
                throw new Error(`Error: ${response.status}`);
            }

            const data = await response.json();
            console.log('POST: ', data);
            console.log("Minting NFT");
            const nftContract = new Contract('0x5cBeEBfFb922377dce34307167c95585A00C1721', contractAbi.abi, signer);
            try {
                const mintTx = await nftContract.safeMint(address, data.ipfs_url);
                setIsLoading(false);
                console.log(mintTx?.hash);
                await mintTx.wait();
            } catch (e) {
                console.log(e);
                setIsLoading(false);
            }
        }

        return (
            <div className={styles.container}>
                <Head>
                    <title>RainbowKit App</title>
                    <meta
                        name="description"
                        content="Generated by @rainbow-me/create-rainbowkit"
                    />
                    <link rel="icon" href="/favicon.ico"/>
                </Head>

                <main className={styles.main}>
                    <ConnectButton/>

                    <h1 className={styles.title}>AI Creature generator</h1>

                    <p className={styles.description}>
                        To generate a new AiMon press Generate and wait a few seconds.
                    </p>
                    <p className={styles.subtitle}>
                        To unlock <b>evolutions</b> mint your creature as an NFT on the
                        Polygon network.
                    </p>

                    <p className={styles.subtitle}>
                        To unlock <b>evolutions</b> mint your creature as an NFT on the
                        Polygon network.
                    </p>
                    <div className={styles.grid}>
                        <div className={styles.card}>
                            <Input
                                value={promptInput}
                                onChange={handlePromptInput}
                                placeholder="Your AiMon prompt - example: baby yoda"
                                margin={2}
                            />
                            <Button onClick={generateCreature} colorScheme="blue" margin={2}>
                                Generate
                            </Button>

                            {isLoading && <Progress size='sm' isIndeterminate/>}

                            <Image
                                margin={5}
                                boxSize="400px"
                                src={creatureImg}
                                alt="Creature"
                            />
                            <div className={styles.card}>
                                <p>Level: 1</p>
                                <p>HP: 100</p>
                                <p>Attack: 100</p>
                                <p>Defense: 100</p>
                                <p>Speed: 100</p>
                                <p>Special: 100</p>
                            </div>
                            <Button onClick={mintNft} colorScheme="blue" margin={2}>
                                Mint
                            </Button>

                            <Button colorScheme="blue" disabled margin={2}>
                                Evolve
                            </Button>
                        </div>

                    </div>
                </main>

                <footer className={styles.footer}>
                    <a href="https://stevyhacker.github.io" target="_blank" rel="noopener noreferrer">
                        Made by @stevyhacker
                    </a>
                </footer>
            </div>
        );
    }
;

export default Home;
